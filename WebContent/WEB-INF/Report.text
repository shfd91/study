12. 유용한 클래스들(java.lang, java.util)
(1) Wrapper Class 객체가 아닌것을 객체로 쓸 수 있게 만들어주는 클래스(기능 확장)
	int i = 10;
	i.변수, 메서드(x)
	
	Integer i = 10;
	i.변수, 메서드(o)
	
(2) 시간측정 (1/1000)
	System.currentTimeMilis
(3) 문자열 추출하기(파싱하기)
	String.split(); -> 자신이 지정한 문자를 기준으로 문자열을 나누어 줌 (메소드 차원으로 간단한 문자열)
	String.trim();

(4) Random
난수를 생성하는 메소드
인자 값에 10을 넣으면 0부터 10개의 숫자를 뽑아낸다.
* 범위 공식 - (최대 값 - 최소 값 +1) + 최소값

(5) 날짜와 시간 : Date, Calendar

(6) 문자열 파싱하기 : SringTokenizer *열거형 - Enumeration
데이터를 배열로 나누지 않고 열거형으로 나누고 hasMoreTokens메소드와
반복문을 이용하여 데이터가 없을 때 까지 반복할 수 있다.
StringTokenizer는 복잡한 문자열이라도 쉽게 구분할 수 있다.

(7) ***** Collection(Util)
Set(저장) - List(보여주기)
1) Set 
	- 중복된 데이터를 저장하지 않는다.
	- 정렬 순서가 없다.
	- 일반적으로 사용 : HashSet, LinkedHashSet
	- Set은 SortedSet의 자식 인터페이스 
2) SortedSet
	- 정렬기능을 추가
	- TreeSet, ....
3) List
	- 중복된 데이터를 저장
	- 정렬 순서가 있다.
	- ArrayList, vector, LinkedList, ...
4) Map
	- 일반 콜렉션은 하나씩 저장하는데에 반 해, Map은 한 쌍씩 저장하여 키, 값으로 나눈다.
	- 데이터를 검색하는 용도로 사용
	- HashMap, HashTabl.


Methods 
add() - 추가
remove() - 선택 지우기 
clear() - 모두 지우기 
contatins() - 관련된 내용 검사 
isEmpty() - 데이터가 empty인지 
iterator() - 데이터를 열거형으로 만들때 사용
size() - 데이터가 몇 개인지


13. Generic
(1) 용도
	1) 특정(데이터) 타입(객체형)을 미리 검사
		- 사전에 잘못 된 데이터 타입을 미리 체크
	2) C++의 Templeate와 비슷 함

(2) 문법
	1) 만드는 법
		class 클래스명<이름>{...}
	
	2) 사용하는 법
		클래스명<데이터타입> 변수명 = new 클래스명<데이터타입>()
		
	* < > 에 데이터 형을 명시해놓은 경우 해당하는 데이터만 사용해야 한다.
	* API에서 이름<E>라고 되어 있는 경우에만 제너릭을 사용 가능하다.
	* 데이터 타입을 변경할 필요 없이 사용할 수 있어 효율성이 좋다.
		
14. 예외 처리
(1) 정의 : 예외가 발생했을 때 예외에 대한 제어권을 
		시스템(JVM)이 아니라 개발자가 가질 수 있게 하는 방법
(2) why?
	1) 예외가 발생했을 때 메시지에 대한 표현 문제
	2) 프로그램의 비정상적인 종료
		
(3) try, catch, throw, throws, finally
		
(4) try/catch block
	try{
		코드...
	}catch(...){
		
	}

(5) 예외 클래스
* Throwable클래스에서  중요한 메소드 getMessage, printStackTrace, toString
	* Exception - err.toString() 할 시 무엇 때문에 에러가 발생했는지 알 수 있음
		RunTimeException
		IOException
	* Error
		
(6) throw 일부러 예외를 발생 - 예외 처리 테스트 용도, 예외 처리를 다른 곳에서 
	1) block안에서만 사용
	2) 단 1개만 던질 수 있다.
		
(7) throws
	1) 예외가 발생하기 전에 던짐
	2) 여러 개의 예외를 던짐
	3) 메서드 밖에서만 사용
		
(8) finally
	1) block
	2) try/catch와 함께 사용
		try{
			...
		}catch(..){
			...
		}finally{
			...
		}
		반드시 실행을 보장받을 수 있는 영역

15. IO(Input & Output)
 (1) java.io
 
 (2) 모든 입출력은 Stream 으로 구현된다.
   - 단방향
   - 원칙적으로 순차적(예외가 존재)
   - 지연 발생 가능
   - 어떤 장치를 사용하든 사용법은 거의 동일하다.
 
 (3) 자바에서 제공하는 Stream 방식
   1) Byte Stream : 1바이트씩 처리
      - 기계가 사용하기 편한 방식
      - InputStream, OutputStream
	  - FileInputStream, FileOutputStream
	  - DataInputStream, DataOutputStream - 기본 데이터타입을 쉽게 입출력하기 위한 클래스
	  - RandomAccessFile - 순차적이 아닌 임의로 접근(파일에 저장된 데이터에 활용)
	  - ObjectInputStream, ObjectOutputStream - (객체) 복잡한 데이터를 저장
   
   2) Character Stream : 내부에서 ByteStream으로 변환
      - 사람이 사용하기 편한 방식
      - Filter 방식
      - Reader, Writer - getByte 사용 안해야 함.
	
	파일 줄 바꿈 : \r\n
	
	* Filter class와 wrapper class의 차이 : 비 객체를 포장 / 클래스를 포장하는 기능
		두 클래스의 목적은 기능 확장으로 기능을 사용하기 쉽도록 하는 부분에서 차이점은 없다. 

	* PrintStream
	* Serializable(직렬화) - 보안 + 안전하게 데이터 전송하기 위함
		public Interface Serializable{
			
		}
	* PrintWriter - 좋은 기능 집합체
	* file - 
	
	* annotation - java5 이후 생긴 기능. @으로 지정
	
		
	   16. Thread
(1) Program & Process 
   - Program (컴퓨터에서 사용하는 모든 소프트웨어)
   - Process (실행중인 상태, 실행중인 프로그램)
   // 하나의 프로그램 안에서 작업되는 단위
   1) Single Process
   2) Multi Process
   -  Multi Processor 
   // cpu는 한번에 한가지 일밖에 하지 못함
   // 운영체제가 바뀐다고 여러가지 일을 하지 못함
   // 여러일을 하게 만드는 게 Thread 사용

   (2) Process
   1) Thread
   - Single Thread
   - Multi Thread
   2) 모든 프로그램은 반드시 기본적으로 한 개의 Thread를 가지고 있다.
   - main thread(main method)
   
(3) 처리방식
   1) Thread 클래스(를 상속받아 사용)
   * Time Sharing 방식 (시분할 방식)
   * Scheduling
   2) Runnable 인터페이스
   
(4) Thread의 이름을 처리하는 방법
   1) 직접 변수를 통해 저장
   2) 부모에 저장해두고 사용 // Runable을 사용할 경우 인터페이스라서 이 방법이 불가
   3) currentThread()를 이용 // static이므로 Runable Interface를 구현해도 사용 가능 // Thread.currentThread().getName()
		
(5) Thread의 LifeCycle//
 - 자기 자신이 할 일을 다 하고 stop 되는 것이 가장 이상적임
 - 강제 종료 - stop() 메소드(Deprecated.) 다른 쓰레드에 영향을 끼칠 수 있기에 the interrupt method should be used to interrupt the wait.
 - 효율을 위해 suspend()(Deprecated.) 메소드를 사용(휴게실) 사용할 경우 resume()을 반드시 해줘야 함.
	suspend의 대안은 sleep()으로 사용 함. block(지연) / sleep대신 yield() 사용 가능

 - 비동기 방식과 동기 방식. 동기상태에서만 사용할 수 있는 wait(),notfy() 메소드
 
(6) Synchronization(동기화) - 동시에 일을 처리하지 않고, 한번에 하나씩 처리하는 것
	1) 메소드
	2) 블럭
		synchronized(...){
			...
		}
	3) wait(), notify(), notifyAll() // 외부에서 제어
		* notifyAll() 메소드를 사용하면 쉬고있는 모든 스레드를 일하는 공간으로 보낸다.

(7) 스레드 강제 종료
	1) stop()
	2) interrupt()
	3) 직접 제어

(8) 스레드의 종료 시점
	1) isAlive() - ~스레드가 살아있으면(if문으로 사용)
	2) join() - 스레드.join() - 메소드를 붙인 스레드가 끝나기 전까지 먼저 끝나지 않는다.
		
17. Windows Programing
(1) 재료 : Component
(2) 디자인 : Layout
(3) 동작 : Event

(4) Component
	1) AWT(Abstract Window Toolkit)
		java.awt.Component
			Button
			Canvas
			Checkbox
			Choice
			Container - 
				Panel
					Applet - 웹에서 실행할 수 있는 응용 프로그램 ex)Active X
				Window
					Dialog
						FileDialog
					Frame - 응용 프로그램 ex) .exe
			Label
			List
			Scrollbar
			TextComponent
				TextArea
				TextField
			Dialog
				- Custom (User Define) dialog
				- Common Dialog
				- 실행 방식
					Modal
					Modaless

(5) Layout(LayoutManager)
   1) FlowLayout : Panel
      - 순차배치
   2) BorderLayout : Window
      - 테두리 기준 배치(North, South, West, East, Center)
   3) GridLayout
      - 테이블모양 Layout 
   4) GridbagLayout
   5) CardLayout

 (6) Event
   1) 3요소
      - 이벤트 소스 (where, component)
      - 이벤트 클래스 (what, 종류)
         java.util.EventObject
            java.awt.AWTEvent
               ActionEvent
                  컴퍼넌트가 활성화 될 때 발생하는 이벤트
               AdjustmentEvent
                  스크롤바와 같이 조정 가능한 컴퍼넌트에서 조정이 일어날 때 발생하는 이벤트
               ComponentEvent
                  ContainerEvent
                     컨테이너에 컴퍼넌트가 추가/삭제되는 경우 발생하는 이벤트
                  FocusEvent
                     컴퍼넌트에 포커스가 들어왔을 때 발생하는 이벤트
                  InputEvent
                     KeyEvent
                     MouseEvent
                  PaintEvent
                     컴퍼넌트가 다시 그려질 때 발생하는 이벤트
                  WindowEvent
                     윈도우가 활성화, 또는 닫힐 때 발생하는 이벤트
               ItemEvent
                  List, Choice 와 같이 선택항목이 존재하는 컴퍼넌트에서
                  선택항목이 선택 될 때 발생하는 이벤트
               TextEvent
				텍스트 컴퍼턴트의 내용이 변화될 때 발생하는 이벤트
      - 이벤트 핸들러 (how, 처리, 리스너(listener) 인터페이스)
		java.awt.event
		
	2) 이벤트 핸드러 처리방식
		- 이벤트 소스와 이벤트 핸들러가 같은 클래스인 경우
		- 이벤트 소스와 이벤트 핸들러가 다른 클래스인 경우
		- 이벤트 핸들러가 내부 클래스인 경우
		- 이벤트 핸들러가 무명(익명) 클래스인 경우
		
	3) 이벤트 소스와 이벤트 핸들러의 연결
		이벤트 소스.addXXXListener(이벤트 핸들러);
		
	4) Adapter Class
	인터페이스를 구현하면 모든 메소드를 오버라이딩 해야 하지만,
	어답터 클래스를 사용하면 일부 메소드만 사용 가능(클래스 자체에서 미리 오버라이딩 되어있다.)
	Ex) WindowListener의 winClosing을 사용하려고 하면 WindowAdapter를 
		상속받아 winClosing만 오버라이딩 하여 사용한다.
	
	5) 그외 이벤트 클래스
		
	6) Menu
		- Pull Down Menu(고정식 메뉴)
			MenuBar
			Menu
			MenuItem
		- Popup Menu(이동식 메뉴, Context Menu)
			PopupMenu
			MenuItem
18. 네트워크

*. OSI 7계층과 TCP/IP 4계층
	- OSI 계층을 간략화 한 것이 TCP/IP 계층이다.
*. Protocol
	- 전송계층
		TCP : 연결 지향성 (데이터 안전성)
		UDP : 비연결 지향성 (속도) / DatagramSocket, DatagramPacket
	- 네트워크 계층  
		IP : 네트워크 장치 식별자 / 장치 연결
*. IP, 
	Port
		- 프로그램 통로
		- 6만여 개 : 1~1024 // C:\Windows\System32\drivers\etc\service에서 사용하는 포트 확인 가능
	Socket
		- IP + Port + Data
		프로토콜명://도메인명(ip주소):포트번호/파일명/#섹션명
		
		

		
         Database
           --------------
   삽입
   삭제
   수정
   조회
   ------
   DBMS
   - Oracle
      full version 
      express version
      ver) 8i, 9i, 10g(X), 11g, 12c
   - MS-SQL Server
   - MySQL
   - Infomix
   - DB2
   - MariaDB
   ...

      1. 클라이언트 프로그램

- SQLplus
- SQLdeveloper
- Toad
- SQLgate, ...
   
      2. Oracle 학습 방향

1) 관리자(Administrator)
2) 개발자(Developer)

      3. 도움말 참고

      4. 저장 형태에 따른 분류
1) 계층형 DB (HDB)
   - Tree 모양 저장
2) 네트워크형 DB (NDB) 
   - 그래프 형식(순환형) 저장
3) *관계형 DB (RDB)
   - Table 형식 저장
   (1) 데이터를 이루는 가장 최소단위 : 컬럼, field
            field < record < table(file) < database
4) 객체형 DB (ODB)
5) 객체관계형 DB (ORDB)
 
      5. SQL(Structured Query Language)
1) 비절차적 언어
2) 구성 언어
   (1) DDL (Data Definition Language)
      - CREATE
   - ALTER
   - DROP
   
   (2) DML (Data Maniulation Language)
   - INSERT
   - UPDATE
   - DELETE
   
   (3) DCL (Data Control Language)
   - COMMIT, GRANT, REVOKE, etc...
   
   (4) QL (Query Language)
   - SELECT

 
 
* 도스창 - sqlplus (id) - 비밀번호 입력      
   quit(접속 종료)
   
   !. sqlplus id/pw
   !. sqlplus id/pw@server name.
   !. (접속중) connect id/pw - 사용자 변경 (변경 확인 명령어 : show user)
 ename, deptno, job, sal, comm from emp;

   <sqlplus 명령어>
@. select username, account_status from dba_users; (유저정보 조회 명령어)
@. alter user (id) identified by (pw); 비밀번호 변경
@. alter user (id) account unlock; 계정 잠금 해제
@. select t ename, deptno, job, sal, comm from emp;
@. name from tab; 해당 계정이 보유하고 있는 테이블 목록 조회
@. grant connect to (id); 접속 권한 주기
@. create table (테이블명)(조건); 테이블 만들기
@. sqlplus system as sysdba; 조회만 하겠다. -> 비밀번호 변경(로컬로 접속했을경우)

 
      6. SELECT 
1) 데이터 검색
2) Basic Grammer
   SELECT 필드명, ... FROM [소유자].테이블명;
   SELECT * FROM [소유자].테이블명;
   
   *필드의 가공처리
   
   ---------------------
   사원의 사번, 이름, 급여를 조회하는데 단, 급여는 100$를 추가해서 검색
   select empno, ename, sal from emp;
      - 간단한 계산식을 추가하여 테이블을 출력 할 수 있다.
      
   ----------------------
   필드에 alias 적용 가능
      필드명 as 별명
      필드명 별명
   select empno as 사번, ename as 사원명, sal as 급여 from emp;   
   
   -----------------------
   중복 값 제거
      첫번째 필드에만 사용 가능
      select distinct 필드명 from 테이블명;
      
3) 확장 문법
   (1) 정렬 기능
   ORDER BY 필드명[, 필드명, ...] [[ASC] | DESC]
      
      ex) select 필드명, 필드명, 필드명 from 테이블명 order by 필드명 asc       || desc;
   
   (2) 조건 기능
   WHERE 조건식 : WHERE 필드명 연산자 값
      
   - 연산자
   기본 연산자 : >, <, >=, <=, =, <>, !=, ...
   논리 연산자 : and, or, not
   SQL 연산자 : between and, in, is null, like, ...
   between : 이상 and 이하
        in   : = or = or
       
   like
   % : 0개 이상의 문자 대체
            beau% - beau, beaut, beauti, beauaaaaaaaaaaaaaaa, .... 들어가      는거 다찾음
   _ : 1개의 문자 대체
            beau_ - beau(x), beaut(o), beauti(x)
            
   is null : null값이냐?
         where 필드명 is null;
      
   *문자와 문자열은 홑따옴표, 실제 데이터는 대소문자 맞춰서
    
      7. Function
1) Single Row Function (단일 행 함수) - 하나의 레코드
   (1) Numeric Function
   round(), trunc(), floor(), ceil() : 소수점 정리
   반올림   올림      버림   올림
   mod()
   나머지 연산
   power()
   거듭 제곱
   sign()
   음수 양수 표시
      ----------------------------------------
      
   (2) Datetime Function
   sysdate : 현재 일/월/년 (DUAL이라는 내장 테이블에서 가지고 옴)         months_between() : 날짜와 날짜의 차이를 개월수로
   add_months() : x개월 날짜
   next_day() : 해당 날짜에서 돌아오는 요일
   last_day()
   round() : 반올림
   trunc() ,...
   
   (3) Character Function
   lower(), upper() : 대소문자 변환
   substr(첫시작,몇개) : 문자 추출
   length() : 문자의 길이
   instr() : 문자의 위치
   ltrim(), rtrim() : 공백 제거
   tanslate(), replace() : 변환
   traslate - 1 대 1 매칭
   replace - 덩어리 변환
         
   chr(), ascii() : 아스키코드로 변환
      
   (4) Conversion Function
   cast()
   to_char()
   to_number()
   to_date()
      
   
   (5) Etc.
   nvl() : null을 특정 값으로 변환
   decode() : 실행연산자 같은 것
   * decode(기준값, 비교값, 참, 거짓)
   
2) Aggregation Function (집합 함수) - 다수의 레코드
   (1) sum(), avg(), max(), min(), count()
   ---------------------------------------
   (2) 조건 기능

   (3) GROUP BY 필드명[,필드명,...]
   HAVING 조건식
3) Analyst Function (분석 함수)
 
      8. DML(Data Manipulation Language)

1) INSERT, UPDATE, DELETE
2) 실습
   (1) 계정 생성
   CREATE USER testuser1 IDENTIFIED by 1111;
   GRANT connect, resource TO testuser1;
   CONN testuser1/1111;

   (2) 테이블 생성
   CREATE TABLE tbltest(
      id number,
      name varchar2(10),
      hiredate date);

   (3) 데이터 입력
   INSERT INTO 테이블명(필드명, ...) VALUES(값, ...); 
   INSERT INTO 테이블명 VALUES(값, ...); 

   (4) 데이터 수정 
    UPDATE 테이블명 SET 필드명=값, ... WHERE 조건식;
 
   (5) 데이터 삭제
   DELETE FROM 테이블명 [WHERE 조건식];

      9. SubQuery
1) 다른 query문에 포함된 query문
2) 반드시 ()를 사용
3) 연산자의 오른쪽에서 사용
4) ORDER BY 사용 불가(괄호 안에서, Query가 끝나지 않기 때문에)
   SELECT ename, job, sal FROM emp 
   WHERE sal>(SELECT sal FROM emp WHERE ename='SCOTT');
5) 결과 값에 따른 유형
   (1) 단일행
   (2) 다중행
   (3) 다중열 
6) 연산자
   (1) 단일행
   >, <, >=, <=, =, !=, ...
   (2) 다중행   // 연산자 다음에 사용
    in, any(or)//최소, all(and)//최대, exists, not, ...
7) 종류
   (1) 연관 서브쿼리
   (2) 비연관 서브쿼리
   
10. JOIN
(1) 여러 개의 테이블을 병합하여 하나의 결과를 도출하기 위한 방법
(2) 종류
	1) Cartesian Join(데카르트 조인, 데카르트 곱)
	2) Equi Join (Default Join)
		- 공통 필드의 레코드를 가져오는 방법
		- Inner Join(Natural Join)
	3) Inner JOIN
		- 공통 필드가 없을 때 사용
	4) Outer JOIN
		- Left Outer Join
		- Right Outer Join
		- Full Outer Join
	5) Self JOIN
		- INNER JOIN으로 사용.
		- 반드시 별명을 주어야 함
		
	
	
(3) 문법
	- 표준 SQL 문법
	- 자체 DBMS SQL 문법
		T-SQL : MS SQL Server
		PL-SQL : Oracle
		
(4) SET 연산자
	1) UNION - 합집합
	2) UNION ALL
	3) INTERSECT - 교집합
	4) MINUS - 차집합
	---------------------
	* 조인은 테이블을 합쳐서 결과를 내는 것이지만, SET 연산자는 각각 따로 결과를 낸 후 결과끼리 합친 것 
	SELECT deptno FROM emp
	UNION
	SELECT deptno FROM dept;
	
	SELECT deptno FROM emp
	UNION ALL
	SELECT deptno FROM dept;
	
	SELECT deptno FROM emp
	INTERSECT
	SELECT deptno FROM dept;
	
	SELECT deptno FROM emp
	MINUS
	SELECT deptno FROM dept;
	
	
create table tblA(id number, value number);
create table tblB(id number, value number);
CREATE TABLE tblC(id number, value number);

insert into tblA values(1, 10);
insert into tblA values(2, 20);
insert into tblA values(3, 30);
insert into tblA values(5, 50);
insert into tblA values(7, 70);

insert into tblB values(1, 10);
insert into tblB values(2, 20);
insert into tblB values(4, 40);
insert into tblB values(5, 50);
insert into tblB values(8, 80);

insert into tblC values(1, 10);
insert into tblC values(2, 20);
insert into tblC values(7, 70);
insert into tblC values(8, 80);
insert into tblC values(9, 90);
		
* 2. INNER JOIN
SELECT id, value FROM tblA INNER JOIN tblb ON tblA.id=tblB.id;		
SELECT id, value FROM tblA, tblB WHERE tblA.id=tblB.id;		
		
/*
직원의 사번, 이름, 업무, 부서번호, 부서명을 조회
SALESMAN에 대해서 사번, 이름, 업무, 부서명을 조회
*/
SELECT empno, ename, job, dname
FROM emp INNER JOIN dept
ON emp.deptno=dept.deptno and job='SALESMAN';
		
SELECT empno, ename, job, dname
FROM emp INNER JOIN dept
ON emp.deptno=dept.deptno and job='SALESMAN';		

/*
newyork에서 근무하는 직원의 사번, 이름, 업무, 부서명, 부서위치를 조회
*/		
		
3. Outer JOIN
SELECT tblA.id, tblA.value
FROM tblA LEFT OUTER JOIN tblB
ON tblA.id = tblB.id;

SELECT tblA.id, tblA.value
FROM tblA RIGHT OUTER JOIN tblB
ON tblA.id = tblB.id;

SELECT tblA.id, tblA.value, tblB.id, tblB.value
FROM tblA FULL OUTER JOIN tblB
ON tblA.id = tblB.id;

SELECT tblA.id, tblA.value
FROM tblA, tblB
WHERE tblA.id = tblB.id(+); // PL-SQL 방식

SELECT tblA.id, tblA.value
FROM tblA, tblB
WHERE tblA.id(+) = tblB.id; // PL-SQL 방식

/*
이름, 급여, 부서명, 근무지를 조회
단, 부서명과 근무지는 모두 출력할 수 있도록 하시오.


4. Non Equi Join(Inner Join)
/*
직원들의 급여에 대한 등급을 조회
*/
SELECT ename, job, sal, grade, losal, hisal
FROM emp INNER JOIN salgrade
ON sal >= losal AND sal <= hisal;


5. 3개 테이블 조인
SELECT tblA.id, tblA.value
FROM tblA INNER JOIN tblB
ON tblA.id = tblB.id
INNER JOIN tblC
ON tblB.id = tblC.id;

SELECT tblA.id, tblA.value
FROM tblA, tblB, tblC
WHERE tblA.id = tblB.id AND tblB.id = tblC.id;

/*
직원의 사번, 이름, 업무, 관리자, 관리자 이름을 조회
/*
SELECT e1.empno, e1.ename, e1.job, e1.mgr, e2.ename
FROM emp e1 INNER JOIN emp e2
ON e1.mgr=e2.empno;

		
11. Transaction
(1) "All Or Nothing"
(2) 명령어 
	commit
	rollback
(3) DML
(4) 동기화
* Flashback - 롤백으로 불가능한 되돌리기. 
		
12. Data Integrity(데이터 무결성)
(1) 무엇을 지킬 것인가 / 어떻게 지킬 것인가
	1) 실체(Entity) 무결성
		- 중복된 데이터 방지
		- Primary Key, Unique
		
	2) 영역(Domain, 범위) 무결성
		- Check
	
	3) 참조(Reference) 무결성
		- Foreign Key
		
	* 무결성을 Constraint(제약)이라고 한다.

(2) 컬럼(필드)의 속성
		1) NN(Not Null) 속성
			- Primary Key, not null
		2) ND(Not Duplicated) 속성
			- Primary Key, Unique
		3) NC(Not Change) 속성
			- Foreign Key
		
(3) Primary Key
   (1) 하나의 테이블에 단 한개만 설정 가능
   (2) 여러 개의 필드를 묶어서 설정 가능

(4) UNIQUE
   (1) 하나의 테이블에 여러 개 설정 가능\
   (2) 중복 방지
   
(5) 필드 수정, 추가, 삭제
	1) 필드 수정, 추가, 삭제
		ALTER TABLE tblExam MODIFY name varchar2(20);
		DESC tblExam;
	
	2) 필드 추가
		ALTER TABLE tblExam ADD zipcode char(7);
		DESC tblExam;
	
	3) 필드 삭제
		ALTER TABLE tblExam DROP COLUMN zipcode;
		DESC tblExam;

(6) DEFAULT
	DROP TABLE tblExam;
	
	CREATE TABLE tblExam(
	id	number,
	name varchar2(10),
	point number(3, 2)
	);
	
	INSERT INTO tblExam(name, point) VALUES('홍길동', 3.14);
	
	/*
	name에 값을 입력하지 않으면 '무명씨'라고 자동입력되게 처리
	*/
(7) SEQUENCE
	- 자동으로 카운팅하여 일련번호를 리턴함
	CREATE SEQUENCE seq_num;
	
	INSERT INTO tblExam(id, name, point)
	VALUES(seq_num.nextVal, '임꺽정', 3.4);
	
	INSERT INTO tblExam(id, name, point)
	VALUES(seq_num.nextVal, '이순신', 3.8);
	
	INSERT INTO tblExam(id, name, point)
	VALUES(seq_num.nextVal, '김유신', 3.2);
	
	SELECT * FROM tblExam
	INSERT INTO tblExam(id, name, point)
	
	
7) SEQUENCE
   - 자동으로 카운팅하여 일련번호를 리턴함
   create sequence seq_num;
   
 8) CHECK
 
 9) FOREIGN KEY
   
   create table dept(
   deptno char(3)
   dname varchar2(10)
   );
   
   create table emp(
   empno number,
   ename varchar2(10)
   hiredate date,
   deptno char(3)
   );
   
   insert into emp(empno, ename, hiredate, deptno)
   values(1, 'hong', sysdate, '100');
   
   insert into dept(deptno, dname) values('100', '영업부');
   insert into dept(deptno, dname) values('101', '마케팅');
   
   /* 필드 추가(age number(2))
      나이가 19~60세까지만 입력 가능하게 하시오
   */
   
13. VIEW
 1) 정의 : 실제 테이블을 여러 관점에서 투영한 가상 테이블
 2) 목적
   (1) 사용자의 편의
   (2) 관리와 보안성
 3) 문법
   CREATE VIEW 뷰이름(컬렴명,...)
   AS
   SELECT문
   
   /* 영업부 직원 중 사번 이름, 급여, 커미션을 VIEW로 작성*/
   
   CREATE VIEW vw_emp_sales
   AS
   SELECT empno, ename, sal, comm FROM emp
   WHERE deptno = 30;
   
   SELECT * FROM vw_emp_sales;
   
   - USER_VIEWS
   - USER_OBJECT
   
   /*
   영업부를 제외하고 급여가 2000이상인 직원들 중 사번, 이름, 급여, 부서, 부서명, 급여등급을
   조회하는 테이블을 뷰로 만들어라. (뷰 이름 : vw_2000);
   */
   
   CREATE VIEW vw_2000
   AS
   SELECT empno, ename, sal, dname, deptno, salgrade.grade
   from emp e INNER JOIN salgrade s;
   
   
14. PROCEDURE
	
	
1) 정의 : 자주 사용하는 쿼리문을 미리 컴파일하여 필요할 때 호출
2) 문법
   CREATE [OR REPLACE] 프로시저명[(파라미터,...)]
   IS
   BEGIN
   END;

   *. Oracle : PL-SQL
   DECLARE
   선언부
   BEGIN
   처리부
   EXCEPTION
   예외 처리
   END;


     

		
		
CREATE TABLE tblExam(
  id number null,
  name varchar2(10) null
);

INSERT INTO tblExam VAlUES(1,'홍길동');
INSERT INTO tblExam(name) VAlUES('임꺽정');
INSERT INTO tblExam(id) VAlUES(2);
INSERT INTO tblExam(id,name) VAlUES(null,null);

SELECT * FROM tblExam; 


-- Primary key 사용
DROP TABLE tblExam;

ALTER TABLE tblExam ADD CONSTRAINTS pk_id PRIMARY KEY(id);
--tblExam 테이블의 id

INSERT INTO tblExam VALUES(null,'홍길동');
INSERT INTO tblExam VALUES(1,'홍길동');
INSERT INTO tblExam VALUES(1,'임꺽정');

DESC USER_CONSTRAINTS;
SELECT CONSTRAINT_NAME, TABLE_NAME FROM USER_CONSTRAINTS;

DROP TABLE tblExam;

CREATE TABLE tblExam(
  id number not null CONSTRAINTS pk_id PRIMARY KEY,
  name varchar2(10) null);
  
CREATE TABLE tblExam(
  id number not null,
  name  varchar2(10)  null,
  CONSTRAINTS pk_id PRIMARY KEY(id, name));

DROP TABLE tblExam;

CREATE TABLE tblExam(
  id  number,
  name  varchar2(10),
  CONSTRAINTS uk_id UNIQUE(id)
  );
INSERT INTO tblExam VALUES(1,'홍길동');
INSERT INTO tblExam VALUES(1,'홍길동');
INSERT INTO tblExam(name) VAlUES('홍길동');
		
		
		
		
		
		
		
		
		
		
		-- 7788사원의 급여를 3500으로
  CREATE OR REPLACE PROCEDURE usp_sal
   IS
   BEGIN
      update emp
      set sal=3500
      where empno=7788;
   END;
  /
  
desc user_objects;

select object_name, object_type from user_objects;

EXEC usp_sal;

SELECT empno, sal from emp WHERE empno=7788;

DROP PROCEDURE usp_sal;

EXEC usp_sal(7788,3000);
CREATE OR REPLACE PROCEDURE usp_sal(p_empno in number,p_sal in number)
IS
BEGIN
  update emp
  set sal = p_sal
  where empno=p_empno;
END;
/
-- 위의 프로시저를 개선하여 메시지를 출력할 수 있도록 하자.

CREATE OR REPLACE PROCEDURE usp_sal(p_empno in number,p_sal in number)
IS
BEGIN
  update emp
  set sal = p_sal
  where empno=p_empno;
  
  if sql%notfound then
    dbms_output.put_line(to_char(p_empno)||'은(는) 없는 사원번호임');
    -- java에서 +는 Oracle에서 ||로 사용함
  else
    dbms_output.put_line(to_char(sql%rowcount) || '명의 자료가 잘 수정되었습니다.');
  end if;
END;
/
EXEC usp_sal(10000,3000);

SET serveroutput ON;

-- 특정한 수에 7%의 세금을 계산하여 그 결과를 돌려받을 수 있는 프로시저

CREATE OR REPLACE PROCEDURE usp_tax(p_num in number,p_result out number)
IS
BEGIN
  --변수:=p_num * 0.07;
  p_result := p_num * 0.07;
END;
/
var g_result number;
EXEC usp_tax(3500, :g_result);
print :g_result;

/*
사원 등록 프로시저 : usp_register
사원이름, 업무, 직속상사, 급여를 입력받아 등록한다.
수버번호는 직속상사와 부서번호가 같고,
보너스는 SALESMAN일 경우 0, 그 외에는 null을 입력
*/

CREATE SEQUENCE seq_empno START WITH 8000;

CREATE OR REPLACE PROCEDURE usp_register
(p_ename in emp.ename%type, p_job in varchar2, p_mgr in EMP.MGR%type, p_sal in number)
-- 테이블 안에 있는 타입을 가져다가 쓰겟다
IS
	v_comm emp.comm%type;
	v_deptno emp.deptno%type;
BEGIN
	if p_job='SALESMAN' then
		v_comm := 0;
	else 
		v_comm := null;
	end if;
	
	
	select 필드명 into 변수명 from 테이블명;
	select deptno into v_deptno from emp where empno=p_mgr;
	// 현재 선택된 필드명을 변수명으로 옮겨 닮겠다는 의미 
	
	
  INSERT INTO emp(empno, ename, job, mgr, hiredate, sal, comm, deptno)
  VALUES(seq_empno.nextVal,p_ename, p_job,p_mgr,sysdate,p_sal,v_comm,v_deptno);
END;

CREATE SEQUENCE seq_empno START WITH 8000;
CREATE OR REPLACE PROCEDURE usp_register
(p_ename in emp.ename%type, p_job in varchar2, p_mgr in EMP.MGR%type, p_sal in number)
IS
	v_comm emp.comm%type;
	v_deptno emp.deptno%type;
BEGIN
	if p_job='SALESMAN' then
		v_comm := 0;
	else 
		v_comm := null;
	end if;
	
	select deptno into v_deptno from emp where empno=p_mgr;
	
  INSERT INTO emp(empno, ename, job, mgr, hiredate, sal, comm, deptno)
  VALUES(seq_empno.nextVal,p_ename, p_job,p_mgr,sysdate,p_sal,v_comm,v_deptno);
END;



/* 이름을 입력받아 그 직원의 부서명과 급여를 검색하는 프로시저 */
%type - 같은 타입 지정
CREATE OR REPLACE PROCEDURE usp_search
	(p_ename in emp.ename%type, 
		p_dname out dept.dname%type, p_sal out emp.sal%type)
	IS
		v_deptno	emp.deptno%type;
	BEGIN
		select sal, deptno
		into p_sal, v_deptno
		from emp
		where ename=p_ename;
		
		select dname
		into p_dname
		from dept
		where deptno=v_deptno;
	END;

	var g_sal number;
	var g_dname varchar2(20);
	
	exec usp_search('홍길동', :g_dname, :g_sal);
	
	print :g_dname
	print :g_sal
	
	/* 전화번호를 입력받아 다시 전화번호를 리턴하는 프로시저 */
	CREATE OR REPLACE PROCEDURE usp_tel(p_tel in out varchar2)
	IS
	BEGIN
		p_tel := substr(p_tel, 1, 3) || '-' || substr(p_tel, 4);
	END;
	
	var g_tel varchar2(20);
	
	begin
	:g_tel := 1234567;
	end;
	/
	
	exec usp_tel(:g_tel);
	
	print :g_tel;
		
15. Trigger
		
		
16. DB 모델링 - 중복 최소화
(1) 관계
	1) 1:1 관계
	2) 1:다 관계 - 이상적인 관계
	3) 다:다 관계
(2) 정규화
	1) 제 1정규화
		- 속성(필드)은 오직 하나의 원자값을 취해야 한다.
	2) 제 2정규화
		- 모든 키가 아닌 컬럼은 기본키 전체에 의존적이어야 한다.(기본키가 두개 이상일 때)
		- 의존하지 않는 컬럼은 따로 테이블을 만들어야 함
	3) 제 3정규화
		- 키가 아닌 컬럼은, 다른 키가 아닌 컬럼에 의존적이어서는 안된다.
	4) 제 4정규화
		- 다대다 관계 해결하기 위한 정규화
	5) 제 5정규화

	
3) ERD 작성툴
*.http://www.dbguide.net/event/dbmodel_2009/data/erwin.zip

4) 설계
   - 개념적 설계
   - 논리적 설계
   - 식별관계
   - 비식별관계
   - 다대다관계
   - 물리적 설계

      17. 자바와 DB의 연동
1) JDBC(Java Database Conectivity)
	1) 해당 DB의 드라이버 준비 : ojdbc6.jar

	2) java.sql.*
   - Connection : DB와의 연결 정보
   - Statement : 명령어 전달 및 실행 
   - ResultSet : 검색결과를 프로그램으로 가져올때 사용하는 객체
	3) ResultSet
   - DB로부터 가져온 결과를 임시로 저장하는 객체
   - 하나의 테이블을 저장할 수 있는 구조
   - 연결지향성
   - 처음에는 반드시 next()를 호출해야 한다.
   - 레코드 단위로 이동할 수 있는 메서드
      next()
      previous()
      first()
      last()
	4) PreparedStatement
		가장 자주 사용 됨
	5) CallableStatement
		DB에 만들어져 있는 프로시저를 호출할 때 사용
		
		
		
		
* javadoc - 도큐먼트의 기본틀을 자동으로 만들어주는 프로그램. (jdk - bin에 있음)
		
* Code Templates - 주석의 기본값을 설정(실행 : Shift - Alt - J)
		types - 클래스 설명
			<pre></pre> - 보이는 대로 화면에 보여줌
		Fields - 인스턴스 변수(클래스 안에 선언된 변수) 설명
		Method - 메서드
			${tags} - 기본적으로 필요한 태그를 자동으로 만들어주는 명령어
			
* UML(Unified Modeling Language) - 통합 모델링 언어는 객체 지향 소프트웨어 
									집약 시스템을 개발할 때 산출물을 명세화, 시각화, 문서화할 때 사용한다.
	Diagram - CLASS Diagram이 가장 중요함. 차순위는 SEQUENCE Diagram

	
	// UML 튜토리얼 - 베이직 노테이션
	
*클래스간의 관계 Generalization(일반화) - 서브클래스가 주체가 되어 슈퍼클래스로 Generalize하는 것.
											반대 - Specialize(구체화)
				 Realization(실체화) - 인터페이스를 오버라이딩하여 실제 기능으로 구현
				 Dependency(의존) - 어떤 크래스가 다른 클래스를 참조
				 
*UML Tool - 1. Rational Rose(상용)
			2. StarUML(ShareWare)
			3. Amateras 플러그인(전자정부프레임워크 기준)
	
	Sequence diagram - 시간에 따라 어떤 로직이 발생하는지 나타나 있는 다이어그램
	1. Things : Actor, Object
	2. Relationship : Message
	3. etc : Life Line, Focus Of Control
	------------------------------------
	1. Actor
		1) 시스템의 외부에 존재하면서 시스템과 교류 혹은 상호작용
		2) 자신에 대해 시스템이 서비스를 해주기를 요청하는 존재들이자, 
			시스템이 정보를 제공하는 대상이기도 하다.
		3) 시스템이 일부가 아니라 외부에 독립적으로 존재
	2. Object
		1) 클래스의 인스턴스
		2) 표기법
			홍길동 : 사원
			(사원 홍길동 = new 사원();)
			홍길동
			:사원
	3. Message
		1) 객체가 통신하는 유일한 수단
		2) 표기법
			동기적 메시지 - 메시지를 받은 다음에 메시지를 보낼 수 있음
			비동기적 메시지 - 상관없이 메시지를 보낼 수 있음
	4. LifeLine
		1) 객체의 생존 기간
	5. Focus Of Control(Activation)
	
	
--------------------------------------------------------------------------------
Web Programming
--------------------------------------------------------------------------------
1. 분류
	Server Side(Back End) - Java + J2EE
	Client Side(Front End) - HTML, CSS, JavaScript
	
2. HTML(Hyper Text Markup Language)
	1) <>을 사용하는 언어
		<시작태그> 데이터 </끝태그>
	2) 디자인을 위한 언어
	
	3) 웹브라우저에서 컴파일 및 실행
	
	4) HTML4.x -> XHTML -> HTML5
	
	5) 문법
		프롤로그
		<html>
			<head> 화면에 보여지지 않는 것들
				...
			</head>
			<body> 화면에 보여지는 것들
				...
			</body>
		</html>
		
		<!--
		작성 규칙
		1. 모든 태그는 반드시 시작태그와 끝태그로 이루어져야 함.
		2. 모든 태그명은 반드시 소문자
		3. 속성값은 반드시 ''나 ""로 묶어준다.
		4. single value는 프로퍼티명 = "값" 형식으로 작성.
		...
		-->
		
		margin - 바깥쪽 여백
		padding - 안쪽 여백
	
	
	
	11.07
	
	div - 블럭을 잡아주는 태그
	css style - 디자인의 표준화된 약속
	
	value - 서버에 전달할 값
	disabled - input의 입력되지 않게 하는 속성, 값을 전달 불가
	readonly - input의 입력되지 않게 하는 속성, 값을 전달 가능
	
	radiobutton의 name이 동일할 경우, 같은 그룹으로 인식한다.(다중선택 불가)
	submit - 현재 입력받은 값을 서버에 전달하는 기능
	
	
3. CSS(Cascading Style Sheet)
	1) 디자인의 효과적인 관리
	2) 웹 디자인의 표준화
	3) version : 1.x -> 2.x -> 3.x
	4) 사용 방법
		(1) Inline Style
			- 태그 안에서 직접 사용하는 방식(즉흥적)
			- style이라는 속성을 통해서 사용
		(2) Internal Style
			- 하나의 페이지에 단 한번만 정의함으로써 
				같은 페이지 내에서는 동일한 디자인을 재사용할 수 있다.
		(3) External Style
			- 별도의 .css파일을 만들어서 불러다 사용하는 방식
			- 여러 페이지에서 재사용가능
	5) 문법
		Selector {property:value; property:value; ...}
			property - 디자인이 적용될 위치를 선택
	6) property 정리
			(1) font 관련 
				font-family
				font-size
				font-style : normal, italic, oblique
				font-weight : 글자의 굵기
				font-height : 줄간격
				font-variant : 텍스트를 작은 대문자로
				font
				
			(2) 색상 및 이미지 관련
				color
				background-color
				background-image : 배경 이미지의 반복 방법 지정
				background-attachment : 배경 이미지의 고정 여부
				background-position : 배경 이미지의 시작위치 지정
				background
			
			(3) Text 관련
				text-transform : 대문자를 소문자로, 소문자는 대문자로
				text-align : left right center
				text-indent : 문단의 들여쓰기
				text-decoration : 텍스트에 더해지는 여러가지 장식
				vertical-align : top middle bottom
				line-height
				
			(4) 여백 관련
				- 가장 바깥쪽 여백
					margin-top, margin-left, margin-right, margin-bottom
				- 가장 안쪽 여백
					padding-top, padding-left, padding-right, padding-bottom
				- 경계선 여백(바깥쪽과 안쪽의 중간 여백)
					border-top, border-left, border-right, border-bottom,
					border-width, border-style, border-color
	
	7) 상속
		(1) 독립적 상속
			- 하나의 태그가 다른 태그를 포함할 경우, 그 포함된 태그는 포함하는
				태그 스타일의 영향을 받는다.
			- 만약 상속을 거부할 경우, 다시 포함된 태그에서 프로퍼티를 지정해주면 된다.
		(2) 선택적 상속
			- A태그 안에 B태그를 포함시켜 정의하는 방식으로 B태그는 A태그 영역에서만 유효한 값을 가진다.
			
		11.08
	8) 원하는 디자인 골라서 사용하기
	
	* class, ID
		.(dot) - 클래스라는 속성을 가지고 접근할 수 있는 디자인
		여러개의 선택자를 동시에 선택하고자 했을 때
		.으로 되어있을 경우 class로 접근하고, #으로 되어 있을 때는 id로 접근한다.
		class나 id부분이 공백으로 되어 있을 경우에 선택적 상속한다.
		
		
	
	
	
	
	
	
---------------------------------------------------------------------------------------------

	*. Script Language
ex) javascript, vbscript, jscript....

**. JavaScript : jQuery, node.js, Angular.js, ...

***.JAVASCRIPT
: 객체 기반 언어

1. 사용 방법
(1) inline style // 태그 안에 
	- 이벤트 핸들러용
(2) internal style // 페이지 안에 스크립트를 사용
(3) external style(.js)
	* src="" : 외부에 만들어진 js를 불러올 때 사용

2. 자바스크립트 맛보기
(1) document.write()
(2) alert()
(3) 이벤트
	- onblur
	- onclick - 버튼을 눌렀을 때
	- onfocus
	- onmouseover - 마우스를 위에 올려놨을 때
	- onmouseout
	- onselect
	- onsubmit
	- onreset
	- onunload
	- onload : 생성자같이 어떠한 것이 실행될 때 한번만 실행되는 이벤트
	- onabort
	- onerror
	- ondbclick
	- ondragdrop
	- onkeydown
	- onkeypress
	- onkeyup
	- onmousedown
	- onmousemove
	- onmouseup
	- onmove
	- onresize

3. 변수, 연산자
(1) 변수 선언 방법
	1) 암시적 선언
		i = 10;
	2) 명시적 선언
		var i;
		i = 10;
		i = 'a';
		i = 3.14
		i = 다른 객체

(2) === 연산자
	A === B

4. 함수(메서드)
(1) 문법
	function 함수명(...){
		함수내용;
		...
		[return [값];]
	}

(2) 변수
	1) 지역변수
	2) 전역변수

(3) 내장 함수
	1) 메시지 함수 : alert(), confirm(), prompt() // 사용자로부터 입력을 받을 수 있음
	2) eval() : 작성된 문자열을 자바스크립트 코드로 검증 및 교정
	3) parseInt(), parseFloat() // 문자형을 실수 또는 정수형으로 변환
	4) String(), Number()
	5) isNaN() // 숫자구별 true 아니면 false, isFinite() // 숫자의 유무한 구별(문자열 구별)
	6) escape(), unescape()
		알파벳과 숫자 및 * @ - _ + . / 를 제외한 문자를 모두 16진수 문자로
		바꾸어 주거나 다시 원상태로 복구.
		URL이나 쿠키문자열과의 충돌을 피하기 위해 사용함.
	....


5. 객체
(1) 내장 객체
	1) Array 객체
		- 1차원 배열만 지원
			myarray = new Array(10);
			or
			myarray = new Array();
			myarray[0] = 값;		
			...
		- 2차원 배열 사용시
			myarr1 = new Array(10);
			myarr2 = new Array(10);
			myarr3 = new Array(10);

			myarr = new Array(myarr1, myarr2, myarr3);
		- 속성과 메서드
			length
			concat(), join(), reverse(), sort(), slice(), ...

	2) Date 객체
		getFullYear(), getMonth(), getDate(), getDay(), getHours(),
		getMinutes(), getSeconds(), getTime(),... setter 메서드도 존재

	3) Math 객체

	4) String 객체 // html처럼 문자를 꾸며주는 기능이 있다.
		- anchor(), bold(), fontcolor(), fontsize(), italics(), link(), 
			toLowerCase(), toUpperCase(), ...
			*. 에디터 기능 활용
				- 네이버 스마트 에디터
				- 다음 에디터
				- ck 에디터
				...
		- charAt(), concat(), indexOf(), lastIndexOf(), split(), substring(),
			substr(), ...

	5) Screen 객체
		- availHeight, availWidth, height, width
		- pixelDepth(픽셀당 비트 수), colorDepth(사용가능 색상수)

	6) 객체와 함께 쓰면 참 좋은 문법
		- for ~ in : 배열에 있는 모든 항목을 꺼내옴.
		- with : 단 한번의 메소드 선언으로 여러 항목의 부모 클래스를 지정

(2) 브라우저 객체
	window
		parent
		frame
		self
		top
		document
			link
			anchor
			image
			applet
			form
				text
				textarea
				checkbox
				radio
				select
				button
				reset
				password
			layer
			area
		location
		history
		navigator
	---------------------------------------
	1) window
		open(), status, close(), moveTo(), resizeTo(), resizeBy(),
		scrollBy(), scrollTo(), alert(), confirm(), prompt(), print(), focus(),
		blur(), setTimeout() : 몇초 후에, setInterval() : 몇초 마다(반복), clearTimeout() : 중지, closed,
		defaultStatus, opener : , name, ...

	2) location
		- 속성
			hash, host, hostname, href, pathname, port, protocol,
			search
		- 메서드
			reload() : 새로고침, replace()
		- 사용 방법
			location.href="http://서버명/...";
			location.href="특정 html";
			location.reload();

	3) history
		history.back()

	4) navigator
		- 속성
			appCodeName, appName, appVersion, userAgent, 
			platform
		- 메서드
			JavaEnabled()
		
	5) image
		- 속성
			border, complete, height, width, hspace, vspace,
			length, lowsrc, name, src
		- 메서드
			onabort(), onerror(), onload()

(3) 사용자 정의 객체

=================================================================
********** DOM(Document Object Model) 
- DOM API // 함수들의 모음
- www.w3c.org/DOM
- 정의 
	1) 문서를 객체로 표현하기 위한 표준
	2) 이때의 문서는 markup language 문서이다.
	3) 자바스크립트, 자바, C, C# 등 다양한 언어에서 DOM API를 지원

1. innerHTML을 이용한 화면 동적 변경

2. DOM API ( Node, Document, Element) // 상속관계
Node : 공통적인 모든 부모사항을 노드라고 한다.
(1) Node : DOM에서 표현되는 모든 것
	- 주요 Property
		nodeName		String
		nodeValue		String	
		nodeType		unsigned short
		parentNode		Node 		// 부모
		childNodes		NodeList	// 자식들
		firstChild		Node
		lastChild		Node
		previousSibling	Node
		nextSibling		Node
		ownerDocument	Document

	- nodeName과 nodeValue
		Node Type	nodeName	nodeValue
		------------------------------------------
		Document	#document	null
		Element		태그 이름	null
		Text		#text		문자열

	- nodeType
		ELEMENT_NODE	1 // tag(element)
		ATTRIBUTE_NODE	2
		TEXT_NODE	3
		DOCUMENT_NODE	9

(2) Document
	1) 문서 전체를 나타내는 인터페이스
	2) Node인터페이스를 상속받는다.
	3) 추가된 프로퍼티
		- documentElement		Element		루트
	4) 함수
		- getElementById()		Element
		- getElementsByTagName()	NodeList
	5) NodeList
		- item(), length, ....

(3) Element
	1) 태그를 나타내는 인터페이스
	2) 프로퍼티
		tagName		String
	3) 함수
		getAttribute()
		setAttrtibute()
		removeAttribute()

(4) 문서 구조 변경
	1) Document에서 Element 생성
		createElement(태그명)	Element
		createTextNode(문자열값)	Text

	2) Node인터페이스의 DOM 트리 변경 관련 함수
		insertBefore(추가될 노드, 현재 노드)	Node
		replaceChild(교체할 노드, 현재 노드)	Node
		removeChild(제거할 노드)		Node
		appendChild(새로 추가할 노드)		Node

================================================================

6. 사용자 정의 객체
(1) 클래스 만들기
	1) java
		class 클래스명{
			인스턴스 변수;
			...
			메서드();	
			...
		}
	
	2) javascript // 무명함수(한번만 사용하는 함수) 이용
		클래스명 = function(parameter){
			this.인스턴스 변수 = parameter;
			...
		}

(2) 메서드 만들기
	클래스명.prototype.메서드명 = function(parameter){...}

(3) Object를 이용하여 클래스 만들기
	var obj = new Object();
	obj.id = "hong";
	obj.name = "홍길동";
	obj.setValue = function(i, n){
		this.id = i;
		this.name = n;
	}

(4) 패키지 만들기
var kr = new Object();	// kr = {};
var kr.co = new Object();	// kr.co = {};

kr.abc = function(id, name){
	this.id = id;
	this.name = name;
}

kr.def = function(id, name){
	this.id = id;
	this.name = name;
}

kr.co.ghi = function(id, name){
	this.id = id;
	this.name = name;
}

================================================================
7. 이벤트
(1) 이벤트 리스너 방식의 함수
	1) addEventListener(이벤트, 이벤트 핸들러, 캡쳐 타입)
		attachEvent(이벤트, 이벤트 핸들러) - IE 구버전

	2) removeEventListener(이벤트, 이벤트 핸들러, 캡쳐 타입)
		detachEvent(이벤트, 이벤트 핸들러) - IE 구버전

(2) 이벤트 정보
	function fnClick(){
		var event = window.event;
		...
		var target = e.target;
	}
	----------------------------
	function fnClick(e){
		var target = e.srcElement;
	}	

(3) 마우스 이벤트
	1) click, dbclick(비표준), mousedown, mouseup, mouseover, mouseout
	2) 클릭 판별하기
		w3c 표준 button값
		--------
		0	일반 버튼(주로 왼쪽 버튼)
		1	추가 버튼(주로 가운데 버튼 또는 휠)
		2	컨텍스트 버튼(주로 오른쪽 버튼)

		IE
		--------
		1	왼쪽 버튼
		2	오른쪽 버튼
		4	가운데 버튼

		Other
		--------
		0	일반 버튼(주로 왼쪽 버튼)
		1	추가 버튼(주로 가운데 버튼 또는 휠)
		2	컨텍스트 버튼(주로 오른쪽 버튼)

			which
			1	왼쪽
			3	오른쪽
			2	가운데

(4) 키보드 이벤트
	1) keydown, keyup, keypress(비표준)
	2) 프로퍼티
		keyCode, ctrlKey, shitfKey, altKey, ...

(5) 이벤트 흐름
	1) 3단계 : 캡쳐 단계(capturing), 대상 단계(targeting), 버블링 단계(bubling)
		- 캡쳐 단계 : 이벤트 발생 대상까지 전달되는 단계
		- 대상 단계 : 이벤트가 발생 대상에 도착한 단계
		- 버블링 단계 : 발생 대상에서 다시 document까지 전달되는 단계

	2) 캡쳐링 중지
		객체.addEventListener("", "", false)

	3) 버블링 중지
		stopPropagation()
		cancelBubble = true // 구 IE의 경우

	4) 기본 이벤트 중지 : submit
		preventDefault()
		returnValue = false;	// 구 IE의 경우
	
	
	
	
	css는 되도록이면 클래스를 사용(class : . / id : # )
	javascript는 id위주로 사용(javascript 내부적 접근) / name은 서버에 전달용
	
	tag : textarea, script는 꼭 닫아줘야한다.
	
	object에 값을 넘겨주면 바로 인스턴스 변수가 생성된다.
	object에 새로운 메서드를 생성하면 object가 패키지가 된다.
	
	
----------------------------------------------------------------------------
	
	
http://docs.oracle.com/javaee/7/api/index.html?javax/servlet/package-summary.html
	
<Context docBase="C:\lsh\Web\JSP\ServletApp2" path="app2"/>
	<!-- http://loaclhost:8080/app2/test.html -->
	
1. 준비사항
	1) 웹 서버 - 인터넷 상에서, 만든 홈페이지를 보여줄 수 있게 해주는 서버
		(1) 무료 : IIS(MS운영체제 기본 내장), Apache, Tomcat,...
		(2) 유료 : Websphere(IBM), WebLogic(Oracle), Jeus(Tmaxsoft), JBoss,...
      
	2) Tomcat 프로그램 준비
		(1) apache.org 또는  tomcat.apache.org
   
	3) 웹 프로젝트 (기본 준비)
	폴더
		WEB-INF
			classes
			lib
			web.xml

	4) 원하는 위치에 프로젝트 작성
		server.xml
		<Context docBase="웹 프로젝트의 실제 경로" path="접근 경로(가상 경로)"/>

	
2. 서블릿(Servlet) : 서버에서만 실행되는 자바 응용프로그램
	1) servlet-api.jar(tomcat\lib) -> 클래스 패스 걸기 혹은 jdk-jre-lib-ext폴더에 붙여넣기
	2) 요청 방법
		(1) GET - 데이터를 주소와 같이 보내는 방식
			- Hyper link 전송방식, URL 전송방식이라 불리운다.
			- 전송방법이 다양하다.
			- 소량의 데이터만 전송 가능하다. 데이터를 헤더에 같이 보내기때문에 많은양을 보낼 수 없다.
			- 전송되는 데이터가 노출된다.
			- 기본 요청방식
			- 정보 조회목적으로 요청한다.
		(2)	POST
			- 폼 전송방식
			- 전송방법이 단 한가지다.(폼으로만 묶어서)
			- 대량의 데이터를 전송
			- 전송되는 데이터가 노출되지 않는다.
			- 쓰기목적
		
		
	* Round Trip - 리퀘스트, 리스폰스 왕래
	
	http://192.168.1.51:8080/lsh/index1.html
	http://192.168.1.51:8080/lsh/test1
	javac -d ../classes/myservlet ServletTest3.java
	javac -d ../classes ServletTest3.java

	3) 서블릿의 3대 클래스
		(1) javax.servlet.http.HttpServlet
			- doXXX(); // 대표 메소드들
			- 부모 : javax.servlet.GenericServlet
			- 최종 부모 : Servlet(인터페이스)
					init() ---- 생성될 때
					service()--	사용자가 요청할 때 /// 서블릿의 생명주기
					destroy() - 사라질 때
					
		(2) HttpServletRequest
			- 주 기능 : getter method(요청한 사용자에 대한 정보)
			- 부모 : ServletRequest
			
		(3) HttpServletResponse
			- addCookie(), sendRedirect(), ...
	4) 서블릿의 LifeCycle
		Servlet
			init()
			service() - 사용자의 요청방식에 따라 get,post형식으로 요청할건지 결정함
			destroy()
	5) 데이터를 전달받는 방법
		- ServletRequest(클라이언트로부터 데이터를 전달받아 서버에 전달)
			String	getParameter(String name) : 클라이언트로부터 하나의 변수를 받아오는 것
			String[]	getParameterValues(String name) : 체크박스처럼 여러개의 값을 받아오는 것(배열)
				* req.getParameterNames();// 클라이언트가 보내오는 모든 변수를 가져옴
			Enumeration<String>	getParameterNames() : 
			Map<String,String[]>	getParameterMap()
	6) 웹 프로그래밍에서 중요한 두 가지 기술
			(1) 페이지 이동 기술
				- Client측 이동기술
					HTML : <a href=""></a>, <meta .../>
					JAVASCRIPT : location.href, history.back()
					JAVA : response.sendRedirect()
							사용자측에서 페이지를 원하는대로 이동했다.
				
				- Server측 이동기술
					JAVA : <jsp:forword/>, <jsp:include/>, <%@ page errorpage=""%>
							서버에서 페이지를 이동해서 사용자가 알 수 없다.
			(2) Data Persistance
				- 쿠키 : 데이터를 클라이언트에 보관
					- 4kb를 넘을 수 없다.
					- 기간제한
					- 텍스트만 저장
						- 메모리쿠키 - 라운드 트리를 한번 돌고나면 사라짐
						.setMaxAge() - 쿠키가 남아있는 시간 설정
						.getCookies() - 쿠키를 다 가져옴
				- 세션 : 데이터를 서버에 보관
					- 기본적으로 쿠키를 사용하나, 개별의 id를 부여하여 사용자가 접속할 때마다 구분한다.
					- HttpSession
						long	getCreationTime() - 처음 시간
						long	getLastAccessedTime() - 마지막 시간
						void	invalidate() - 세션 제거
						boolean	isNew() - 처음 접속하는지 여부
						void	setMaxInactiveInterval(int interval) - 세션 유지시간
	7) .war로 압축

3. JSP(Java Server Page)
	1) HTML안에 자바코드를 포함시키는 방법을 제공
	2) .jsp로 저장
	3) 구성요소
		(1) Template Data(정적 데이터)
			- html, xml, ...
		(2) Element(동적 데이터)
			- Scropt Elements
			- Directive
			- Implicit Object
			- ActionTag
			- EL
	 4) Script Elements
		- html안에 자바코드를 끼워넣기 위한 도구들
		(1) Declaration(선언부) : <%! .... %>
		(2) Scriptlet(처리부) : <% .... %> 지역변수, 메서드
		(3) Expression(표현부) : <%= .... %> 표현부에는 세미콜론을 찍지 않는다.
	5) Directive
		(1) <%@ page ... %> // 현재 페이지에 대한 지시
				<%@ page contentType="text/html;charset=euc-kr"%> - 한글
				<%@ page import="java.util.*"%> - import
		(2) <%@ include ... %> // 포함시킬때 사용
				<%@ include file""%>
		(3) <%@ taglib ... %>
	6) Implicit Object(내장 객체)
		(1) request		| 
				javax.servlet.http.HttpServletRequest
		(2) response	- 입출력 기능
				javax.servlet.http.HttpServletResponse 
		(3) out			|    //화면출력용이었으나 지금은 사용하지 않음
				javax.servlet.jsp.JspWriter
		
		
		
		(4) page	|
		(5) config	- 서블릿 기능(거의 안씀)
		
		
		
		(6) session		|// 프로젝트 안에 있는 모든 페이지에서 사용가능(id, pw등)
					// 사용자 구분용
					javax.servlet.http.HttpSession
		(7) application	- 컨텍스트 관련
					// 모든 사용자가 사용하는 객체
					// javax.servlet.ServletContext

		(8) pageContext	|
					// 한페이지 안에서
					// javax.servlet.jsp.pageContext
					// 부모인 jspContext에서 범위(scope)를 지정할 수 있는 
         함수를 가짐
		
		(9) exception - 예외처리
	
			*. 컨텍스트 관련 객체 공통 메서드 (6-6 ~ 6-8)
			   setAttribute()
			   getAttribute()
			   removeAttribute()
			 *. 컨텍스트 관련 객체
		   pageContext < request < session < application   
		   pageContext, request -> 지역변수
		   session, application -> 전역변수

			 **. cookie -> 데이터를 클라이언트에 보관
			 **. session -> 데이터를 서버에 보관

	7) ActionTag
	   // jsp의 단점 : 디자인이 나와야 코딩을 할 수 있다.(협업이 불편)
	   // jsp안에서 java코드를 사용하지 않기 위해서
	   // <% ></%>는 실무에서 사용하지 않음
	   // Standard Actions -> 표준 Action tag, jsp에서 만들어 놓은 태그
	   // Standard Actions + 사용자 정의 Action tag(JSTL)
		(1) 종류
			  <jsp:forward />
			  <jsp:include />
			  <jsp:param />
			  
			  *. java를 불러다 사용
			  <jsp:useBean />
			  // Bean: jsp에서 분리된 java코드 = component
			  <jsp:setProperty />
			  <jsp:getProperty />
		(2) <jsp:include page=""/> // 지시자의 <%@include>는 하나의 서블릿, 컴파일로 되지만,
								액션태그는 따로따로 불러와진다. (메소드 불러오는 개념)
								같은 이름의 변수나 메소드를 따로 선언도 가능하다.
				- 페이지 이동 및 복귀 기능(request)
				- 이동 및 복귀하면서 파라미터 전달 가능
	8) Java Beans
		1) 특징
			자바 빈은 컴퍼넌트에 해당된다. 
			jsp에서 Beans의 정의는 jsp에서 사용했던 자바코드를 별도로 분리해서 파일로 만든 것.
			* 컴퍼넌트 - 메소드를 모아놓은 것은 클래스, 클래스를 모아놓은 것은 컴퍼넌트.
			- java로 만든 프로그램
			- 서버에서 실행
			- Beans는 JSP에서 분리된 Java 코드(컴퍼넌트의 개념, 재활용이 가능)
		2) Bean 태그
			<jsp:useBean />
				- 인스턴스 생성
				- 만약 인스턴스가 이미 생성되어 있다면 그 인스턴스를 참조
			<jsp:setProperty />
				- setter 메소드 호출
			<jsp:getProperty />
				- getter 메소드 호출
				- 화면 출력
		3) Bean 규약
			- 반드시 패키지 생성
			- 반드시 public 지정자 사용
			- 프로퍼티 규약
				getter
					반드시 get으로 시작
					get다음에 시작되는 첫번째 문자는 대문자
					반드시 return type이 존재(void 불가)
					반드시 매개변수는 없어야 한다.
					*. getProperty -> getter메서드를 호출한다
					*. get+property (property첫글자는 소문자로. 대문자로 바뀜)
					
				setter
					반드시 set(소문자)으로 시작
					set다음에 시작되는 첫번째 문자는 대문자
					반드시 return type이 void
					반드시 매개변수는 있어야 한다.
					Value는 실제값을 넣을때만 사용
					* property와 param의 이름이 같을 때, param은 생략해도 됨

			- scope속성에 자바 빈 객체가 사용되는 유효범위를 지정하기 위해서
			page, request, session, application중 하나를 사용해야 함.
			 **. Bean -> MVC -> Spring

		4) 프로퍼티 종류
			- 참/거짓 프로퍼티
				public boolean isValid(){
				// get대신 is를 사용해도 됨
				return true or false;
				 }
			- 인덱스 프로퍼티 : 리턴값이 배열일 경우

			* 액션태그에서 생성된 인스턴스는 자바코드로 사용이 가능하다.
				단, 반대의 경우는 불가능하다.
				
				
			* 과제 : index.jsp - 메인페이지 - 로그인 / 쇼핑몰 - 
					index(로그인 - ...님 환영합니다. 로그아웃으로 변경)
					index.jsp : 로그인 / 쇼핑몰: 로그인이 되어있을 경우에만 쇼핑몰 이동 가능, login.jsp으로
					login.jsp : 아이디& 패스워드 로그인 / 취소
					shop.jsp : 메인페이지
	9) DataBase
		(1) DB 연결 테스트
		(2) DBCP
			기존의 문제점
			 - 지속적 연결 시도
			 - 중복된 코드 작성
			 - DB에 동시 접속 제한

			사용 방법
			 - 직접 작성
			 - 외부 라이브러리 * (C3PO, Common-dbcp, ...)
			 - WAS에서 제공 * (Webserver Application Service)
	
		* jndi를 이용한다면 서버 - context.xml에 리소스 작업을 하면 
		web.xml, server.xml에 내용을 기입하지 않아도 사용할 수 있다.
	10) 게시판 만들기
		*naver api
		*daum api
		*fckeditor
		...
	
	
	
		(1) 기본 로직
		(2) 페이징
		(3) 답변달기
			CREATE TABLE tblreply(
				num		number,
				subject	varchar2(10),
				pos		number,
				depth	number
			);
			
			update tblreply set pos=pos+1;
			insert into tblreply values(1, 'aaa', 0, 0);
			
			update tblreply set pos=pos+1;
			insert into tblreply values(2, 'bbb', 0, 0);
			
			update tblreply set pos=pos+1;
			insert into tblreply values(3, 'ccc', 0, 0);
			
			update tblreply set pos=pos+1; where pos>bbb의 pos;
			insert into tblreply values(4, 'bbb의 답변', bbb의 pos+1, bbb의 depth+1);
			
			select * from tblreply order by pos asc;
			------------------------------------
			insert into tblreply values(1, 'aaa', 1, 0, 0);
			
			insert into tblreply values(2, 'bbb', 2, 0, 0);
			
			insert into tblreply values(3, 'ccc', 3, 0, 0);
			
			update tblreply set pos=pos+1 where group='aaa의 group' and pos>'aaa의 pos'
			insert into tblreply values(4, 'aaa의 답변1', aaa의 group, aaa의 pos+1, aaa의 depth+1);
			
			select * from tblreply order by group, pos;
			
		(4) 자료실
		(5) EL & JSTL
		(6) MVC
		(7) Spring
	
	11) Bootstrap
		(1) UI Framework의 일종
		(2) twitter개발자가 개발
		(3) 버전
			1.X : PC 전용
			2.X : PC 우선 적용, 모바일 적용
			3.X : 모바일 우선 적용, 데스크탑 적용
		(4) 도움 사이트
			getBootstrap.com
			getBootstrap.com/2.3.2
			www.w3school.com
			Bootstrapk.com
			
			* 라이브러리로 직접 파일을 링크 
			* CDN 링크
		
			* <meta http-equiv="X-UA-Compatible" content="IE=edge"> - 익스플로러를 가장 최신버전으로 실행 태그
			* <meta name="viewport" content="width=device-width, initial-scale=1"> - 실행 기기에 따라 해상도 조정
			* <div class="row"/> : 원래 12개의 컬럼으로 되어있으나, 한개의 컬럼으로 사용하겠다는 의미
			
	12) EL(Expression Language)
		(1) 형식
			${식}
			*출력 기능만을 담당한다.
		(2) 식
			-${attribute명}, ${XXXScope.attribute명}
			-${bean 또는 map}
			-${EL 내장객체}
			-${객체.프로퍼티 또는 객체[프로퍼티]}
			
			* 내장객체명을 생략시 page, request, session, application순으로 찾기에
				ex)requestScope.cnt1처럼 써준다.
		(3) 내장객체
			- pageScope
			- requestScope
			- sessionScope
			- applicationScope
			
			- param
			- paramValues
			
			- header
			- headerValues
			
			- cookie
			
			- initParam
			
			- pageContext
	
		(4) 연산자
	
	* 사용자 정의 태그
	
	13) JSTL
		1) 역할 및 특징
			- EL이나 표준 액션태그로 처리하기 힘든 부분 담당
			- 연산, 조건, 반복처리를 담당
			- 개발자가 따로 구현 가능
		2) 구분
			- Core		:	변수 선언, 실행 흐름의 제어, 다른 페이지 이동 기능	
				uri = http://java.sun.com/jsp/jstl/core
			- Formatting:	숫자, 날짜, 시간을 포맷하는 기능
				uri = http://java.sun.com/jsp/jstl/fmt
			- Database	:	DB 기능
				uri = http://java.sun.com/jsp/jstl/sql
			- XML		:	XML 문서 처리
				uri = http://java.sun.com/jsp/jstl/xml
			- Function	:	문자열 처리 함수 제공
				uri = http://java.sun.com/jsp/jstl/functions
	
			* 각각의 기능을 사용하기 위해 URI가 필요하다.
			
			- Core
				<c:set> 저장되는 공간이 액션태그처럼 컨텍스트 영역에 저장되는 변수
				<c:forEach> items 배열의 갯수만큼 가져올 수 있음(length같이 사용)
				<c:import> action tag의 include와 같은 기능
	 
	14) 형상 관리 (SCM : Software Configuration Management)
		(1) 소스관리, 버전관리        
		  - SVN(SubVersion), CSV
		  - GIT
		  
		(2) git-scm.com
		  
		https://git-scm.com/book/ko/v2
		
		(3) 버전 용어
			- 알파 버전
			- 베타 버전
			- Milestone
				1.0-M1, 1.0-M2, ...
			- Release Candidate(RC)
			- General Availability(GA)
				1.0, 1.0.GA, ...
		
		(4) GIT 서버
			- github.com, bitbucket.com, gitlab, ...
			
		(5) 사용방법
			- CLI
			- GUI
		
		* git init으로 로컬 저장소 폴더 초기화 
		* git add *.* - 모든 파일 저장
		* git commit -m "this is first commit" - 로컬 저장소에 저장
		* git remote add origin https://github.com/shfd91/TestProject1.git 리모트 저장소 추가
		* git push -u origin master 오리진이라는 리모트 저장소에 저장
		
		* git clone https://github.com/shfd91/TestProject1.git - 서버에 있는 폴더 불러오기(최초)
		* git pull origin - 불러오기(새로고침)
	
	
	
	자습 (1207)
		
			 지시어<%@ include %>보다 액션태그<jsp:include/>를 사용할 것.
			 선언부<%! int i = 0; %>
			 표현식<%= i %>
			 스크립트릿<% java code %>
			 
			
			스크립트릿을 사용하지 않기 위한 방법으로는 EL, JSTL, JSP Beans등 사용 권장
			(1208)
		내장 객체
			request 내장객체의 쿠키는 배열로 받아온다.
			
			sendRedirect()는 새로운 페이지를 위한 request, response 객체가 생성되며
			forword 액션의 경우 원래 요청에 포함된 객체가 그대로 전달된다는 차이가 있음
			
			session에는 모든 Object(모든 객체..)를 저장할 수 있으므로 다방면 활용이 가능
			pageContext 다른 모든 내장객체에 대한 프로그램적인 접근방법 제공, 
				http요청 처리 제어권을 다른 페이지로 넘기는 기능
AJAX
=================================================================================
1.Asynchronous(비동기) Javascript And XML
	동기적 요청 - 한번에 하나씩 요청을 하고 응답을 받는
	비 동기적 요청 - 요청을 하고 응답을 받지 않아도 계속 요청을 받을 수 있음
	
	* 요청을 자바스크립트로 프로그램적으로(비동기 방식으로) 사용자 의지와 상관 없이 계속 보내는 것.
	* 일반적으로 사용되는 곳 : 포탈사이트 검색 자동 완성, ID 자동 중복검사, ...
		- 사용자에게 편의를 제공해야 하는 곳에 주로 사용된다.
	* 서버에서 받는 데이터가 XML로 되어 있다.

2.XML(Extensible Markup Language)
	1) GML(General Markup Language)
		- 메타 언어
	2) SGML
	3) XML 으로 발전됨
		- 데이터베이스
		- 표준 데이터
	4) 구성요소
		DTD			| (쉽지만, 얕음)
		XML Schema	: (어렵지만, 깊음) 설계도
		
		XML
		XSTL		: 데이터를 설명해주기 위한 언어
		XPATH
		
	5) XML 문서의 종류
		Well Formed XML : 잘 짜여진 문서
		Valid XML
	6) 문서 구조
		Prolog
		
	* CDATA : 문자를 사용할 수 있음. 괄호 안의 문자는 CData Section이라고 함
	
	DTD : <!ELEMENT 엘리멘트명 유형>
			<!ATTLIST 대상 엘리먼트 명> : xml에 있는 항목에 속성 추가
				#REQUIRED 생략 불가
				#IMPLIED 생략 가능
	* XSL : XML의 스타일
	
	namespace : 이름 충돌, 구분 때문에 사용함.
	
	(7) Java에서의 활용
		1) DOM - 메모리 안에서 트리구조로 정리된 상태(문서를 한번에 불러옴)
			전체 데이터, 구조 파악이 쉬움
			* PC에서 사용
			
		2) SAX - 문서를 조금씩 불러 들이는 방식
			속도에 따른 메모리 부담이 없음
			* 메모리에 부담이 없기에 스마트폰에서 사용
		
		DocumentElement - getDocumentElement
		
3. XMLHttpRequest
	1) 상태코드 값
		(1) readyState
			0 (Uninitialize) : 객체만 생성되고 아직 초기화되지 않은 상태
			1 (Loading) : open()이 호출되고 아직 send()까지는 호출되지 않은 상태
			2 (Loaded) : send()가 호출되고 서버로부터 status와 헤더정보는 아직 도착하지 않은 상태
			3 (Interaction) : 서버로부터 데이터의 일부만 받은 상태
			4 (Complete) : 서버로부터 데이터를 전부 받은 상태
			
		(2) status
			200 : OK
			403
			404
			405
			500
			...
			
		(4) JSON(Javascript Object Notation)
			(1) 서로 다른 프로그래밍언어 간에 데이터를 교환하기 위한 표기법
			(2) 읽고 쓰기 쉬운 표기법
			(3) 문법
					- map 형식
						{이름:값, 이름:값, 이름:값, ...}
					- 배열 형식
						[값, 값, 값, ...]
================================================
JQUERY
================================================
1. Javascript 라이브러리
	Prototype, Dojo, mootools, yui, node.js, angular.js ...
	
2. 사이트
	jquery.com, jqueryui.com, w3school...

3. 특징
	(1) 가볍고 빠르며 간결한 오픈소스 자바스크립트 라이브러리
	(2) 핵심 키워드
		1) 막강한 CSS Selector
		2) 크로스 브라우저 지원
		3) 메서드 체인기법 지원
		4) Ajax 지원
		5) 풍부한 플러그인 지원
		...
4. 문법
	1) JQuery Selector
		- HTML DOM을 마음대로 트래버스 가능
		
		div p{font-color:red;} = div안에 있는 p태그만 선택하여 폰트를 빨간색으로 변경
		JQuery("div p") 로 사용가능
		
		#loginID{font-weight:bold; background:yellow;} = 태그의 속성중에 loginID속성을 가진 것만
		jQuery("#loginID")
		----------------------------------------------
		
		*				모든 태그 선택
		E1				E1노드만 선택
		E1.class		클래스만 선택
		E1#id			아이디만 선택
		E1 E2			상속
		E1>E2			바로 아래 자식을 선택
		E1+E2			E1 다음의 형제노드(태그) E2를 선택(단일)
		E1~E2			E1 다음의 형제노드(태그) E2를 선택(모든 형제 선택)
		E1[attr]		E1 태그의 속성 선택
		E1[attr=val]	속성이 val과 같은 것만 선택
		E1[attr^=val]	속성이 val로 시작하는 것만 선택
		E1[attr$=val]	속성이 val로 끝나는 것만 선택
		E1[attr*=val]	속성이 val을 포함하는 것만 선택
		
		$(document).ready();는 
		$();로 줄일 수 있음. $(document).ready(처음 사용하고싶은 함수);
		
		* 정규 표현식 : 찾고자하는 기호를 내 임의대로 찾는 것
	
	2) JQuery Selector : filter
		1) 기본 필터
			:first			선택된 객체(태그)들 중에서 첫번째만 선택
			:last			선택된 객체(태그)들 중에서 마지막만 선택
			:not(selector)	괄호 안의 선택된 것을 제외한 나머지를 선택
			:even			짝수만 선택
			:odd			홀수만 선택
			:eq(index)		index와 같은 위치에 있는 것을 선택
			:gt(index)		index보다 큰 것만 선택
			:li(index)		index보다 작은 것만 선택
			:header			h태그만 선택
			:animated		animation태그만 선택
		2) 컨텐트 필터
			:contains(text)	text가 포함되어 있는 것
			:empty			자식 태그가 없는 것
			:has(selector)	selector의 태그를 가지고 있는 것
			:parent
			
			ex)
				b:contains('j') b태그들 중에서 j라는 값을 가지고 있는 태그들
				div:has('ul') 자식태그중에서 ul태그만 가지고 있는 태그들
				
				table.nameTable td:empty table태그에 nameTable 클래스에서 내용이 없는 td만 선택
				table id:empty
				td:empty
		3) 자식 필터
			:nth-child(index | even | odd)	'n'번째 자식을 선택할 때(선택, 짝수, 홀수)	* 1부터 시작함.
			:first-child					첫번째 열 전체
			:last-child						마지막 열 전체
			:only-child						하나의 자식만 가지고 있는 모든 요소들
			-----------------
			td:first		여러개의 td중에서 첫번째 셀(단일)
			td:first-child	td중의 첫번째 열(전체)
		
		4) 폼 필터
			:input
			:text
			:password
			:radio
			:checkbox
			:image
			:reset
			:button
			:file
			:hidden
			-------
			:enabled
			:disabled
			:checked
			:selected
			
		* jQuery 반복문 - $(selector).each(function); 선택된 것을 반복한다.
		
	3) Manipulation Method
		(1) 내용 변경
			html() : getter, html(val) : setter
			text(), text(val)
			
		(2) 추가 관련(요소 내부)
			append(content), appendTo(selector)
			prepend(content), prependTo(selector)
			
		(3) 추가 관련(요소 외부)
			after(content), insertAfter(selector)
			before(content), insertBefore(selector)
			
		(4) 삭제
			empty() 선택한 요소의 자식을 삭제
			remove() 
			
		(5) 복사
			clone(), clone(bool) : 이벤트까지 복사
	
	4) Traverse Method
		(1) eq(index)			일치된 요소들 중에서 index와 일치되는 순서를 가져옴
		
		(2) filter(expr)		지정된 표현식과 매치되지 않는 모든 요소들을 제거
								즉 매치되는 요소들만 가져온다.
		(3) filter(function)	지저된 함수와 매치되지 않는 모든 요소들을 제거
		
		(4) is(expr)			현재 개체와 표현식에 해당된다면 true
								표현식에 여러 개의 조건이 있다면 그중 하나만 맞아도 true
								
		(5) map(callback)		jQuery객체 안에 있는 요소들의 집한을 다른집합으로 변경해서 옮김
		
		(6)	not(expr)			지정된 표현식과 매치되는 요소들을 제거.
								즉, 매치되지 않는 요소들만을 가져온다.
		--------------------------------------------------------------------------------------
		$("div:eq(1)").css(...);	애초에 div를 찾고 사용할 수 있다
		$("div").eq(1).css(...);	모든 div를 가져온 뒤 첫번째 div를 찾음

		end()	롤백 기능
		
		$("div:odd").eq(0).css("background", "orange");
		$("div:odd").eq(1).css("background", "red");
		
		$("div:odd")
			.eq(0).css("background", "orange");
			.eq(1).css("background", "red"); 이 실행 안되므로 아래 소스로 대체한다.
			
		$("div:odd")
			.eq(0).css("background", "orange");
			.end()
			.eq(1).css("background", "red");
		--------------------------------------------------------------------------------------
		$("div:odd")
		$("div").filter(":odd")
		--------------------------------------------------------------------------------------
		$(div").filter(":odd")
		$(div").not(":even")
		
		(7) find(expr)
		
		(8) add(expr)
			$("div").add("p") 이 $("div p")이나 $("div, p") = div와 p태그 전체 선택하겠다.(후자)
			
		(9) next(expr) 다음 형제로 셀렉
		
		
		(10) parent(expr)
		
		(11) parents(expr)
		
		(12) prev(expr)
		
		(13) prevAll(expr)
		
		(14) siblings(expr) expr을 제외한 모든 형제들(같은 태그..)
		--------------------------------------------------------------------------------------
		$("div:odd").filter("p")	p태그를 제거하고 나머지만 가져옴
		$("div:odd").find("p")		찾은것의 자식중에 p태그가 있는지 찾는 것
		
	5) CSS 관련 메서드
		(1) css(name)			css 호출
		(2)	css(name, value)	
		(3) css(properties)		여러개의 디자인을 묶어서 한번에 지정
				$(this).css({"color":"yellow", "background":"red", "font-weight":"border"});
		(4) addClass(class)		
		(5) hasClass(class)		
		(6) removeClass(class)	
		(7) toggleClass(class)	
	
	6) Attribute관련 메서드
		(1) attr(name)
		(2) attr(properties)
		(3) attr(key, value)
		(4) attr(key, fn)
		(5) removeAttr(name)
		
	7) Event관련 메서드
		(1) bind(type, data, fn)	addeventListener(리스너 추가)
		(2) unbind(type, fn)		리스너 해제
		(3) one(type, data, fn)		행동이 한번만 실행되도록 함
		(4) trigger(event, data)	이벤트가 발생했을 때, 처리
		--------------------------------------------------------------------------------------
		$("#mybutton").click(function(){...});
		
		$("#mybutton").bind("click", function(){...});
		
		$("#mybutton").bind("click", {name:"홍길동", gender:"남성"},
			function(e){
				alert(e.data.name + "/" + e.data.gender);
			}
		);
		
	8) Ajax관련 메서드
		$.get(url, param, callback);
		$.post(url [,data][,success(data, textStatus, jqXHR)][,dataType]);
		
		
		
		
================================================================================================
노벨과 개미 조별 프로젝트 - 신나라
================================================================================================
1. 기획
	1) DB 구조
	2) main_piece.jsp - 작품 메인
		(1) piece_pieceWrite		게시글 등록
		(2) piece_pieceModify		게시글 수정
		(3) piece_pieceList			게시글 목록
		(4) piece_piecePageNum		게시글 페이지
		(5) piece_registerDate		등록일자 순, 조회 순, 선작 순, 추천 순, 편 수별로 조회
		(6) piece_totalPiece		검색
		(7) piece_seriallyPiece		작품 베스트, 미리보기 베스트, 연재작품 베스트 탭
		(8) piece_plusPiece 		plus Piece. (신나라에 일정 금액을 지불하고 한 줄 광고)
		(9) piece_pieceTopMenu		(작품 분류) ~~로 메뉴 이동, 탑 메뉴
		(10) piece_pieceLeftMenu	작품 좌단 메뉴(연재 작품, 작가소개, 작품 서평, 작품 홍보, 작품 게시판)
		(11) piece_realTimeBest		실시간 베스트
		(12) piece_incomeRanking	미리보기 월별 소득 랭킹
		(13) common_incomeRanking	배너 링크
		
	3) main_mypage.jsp - 마이 페이지 메인(내가 하는건가?)
		(1)
		(2)
		...
		
	4) 문제점
		clob : 길이에 조건이 없는(4GB) Data Type
		varchar2 : 4000Byte
	5) 기타 
		DB IP : 192.168.1.5
		ID : novel
		PW : 1111
		localhost:1521/orcl
		
		
	
2. 구축
	1) 클래스명 및 변수명
	2) 

	
	일정
	12.15
	v 	개발환경 구축 재정비
	v 	github 사용법 숙련, 활용
	DB 구조 파악
	DB 접속
	v	view 파일 생성 및 commit
	
	12.16
	게시판 샘플 완성(jsp, db, servlet, custom tag, bean, log4j / jstl, EL / ajax, jQuery, ...)
	DB 적용(test및 실전)
	변수명 생성
	erd 그리기(변수명도 함께?)
	
	
	19~23
	
	26
	
	27
	
	28일 발표
	mibatis, nodeJS, MVC2, String
		
================================================================================================
		
		
		
		
		
		
		
		
		
		
		
		
		
		